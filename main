#!/usr/bin/python3

import curses
import sys
from curses import wrapper
import os

current_deck = "spanish"

def display_menu(stdscr, heading, options):
    key = ''
    selection = 0

    while True:
        stdscr.clear()
        stdscr.addstr(heading)

        #Show all options
        for i in range(len(options)):
            stdscr.addstr("\n"+options[i], curses.color_pair(1) if i == selection else curses.color_pair(2));

        key = stdscr.getkey()


        if key == 'j' and selection < len(options)-1:
            selection = selection + 1

        elif key == 'k' and selection > 0:
            selection = selection - 1
        
        elif key == '\n':
            return selection

        stdscr.refresh()

def text_input(stdscr, heading, prompt):
    current_text = []

    while True:
        stdscr.clear()
        if heading != "":
            stdscr.addstr(heading + "\n")

        if prompt != "":
            stdscr.addstr(prompt)
            for char in current_text:
                stdscr.addstr(char)

        stdscr.refresh()

        key = stdscr.getkey()
        
        if key == '\n':
            return charrtostr(current_text)

        # if any backspace key
        if key in ("KEY_BACKSPACE", '\b', "\x7f"):
            if len(current_text) > 0:
                current_text.pop()
        else:
            current_text.append(key)

def mainMenu(stdscr):
    options = ["Select Deck", "Start training (" + current_deck + ")", "Exit"]

    while True:
        selection = display_menu(stdscr, "Welocome to the vocab training app", options)

        if selection == 0:
            selectDeck(stdscr)

        elif selection == 1:
            training_loop(stdscr)

        elif selection == 2:
            return

def selectDeck(stdscr):
    decks = getDecks("./decks/")

    options = ["New Deck"] + decks + ["Back"]

    selection = display_menu(stdscr, "Select a deck", options)

    if options[selection] == "New Deck":
        text_input(stdscr, "", "Deck Name:")
        return

    elif options[selection] == "Back":
        return

    else:
        current_deck = options[selection]

def getDecks(path):
    decks = []

    if os.path.isdir(path):
        for file in os.listdir(path):
            filename = os.fsdecode(file)
            decks.push(filename)
    else:
        print("No \"Decks\" directory found, creating it.")
        os.makedirs(path)

    return decks

def loadDeck(path):
    pass

def createDeck(name):
    pass

def main(stdscr):
    #selected
    curses.init_pair(1,curses.COLOR_WHITE, curses.COLOR_BLUE)
    #unselected
    curses.init_pair(2,curses.COLOR_WHITE, curses.COLOR_BLACK)

    #correct
    curses.init_pair(3,curses.COLOR_GREEN, curses.COLOR_BLACK)
    #wrong
    curses.init_pair(4,curses.COLOR_RED, curses.COLOR_BLACK)

    mainMenu(stdscr)

def strcmp(str1, str2):
    pass

def charrtostr(charr):
    return "".join([str(i) for a,i in enumerate(charr)])
    
def training_loop(stdscr):
    column = [
                ["Hello", "Hola"],
                ["Good Morning", "Buenas Dias"],
                ["How are you", "CÃ³mo estas"],
            ]

    key = ''

    for vocabPair in column:

        current_text = text_input(stdscr, vocabPair[0], "Translation:")

        if current_text.casefold() == vocabPair[1].casefold():
            stdscr.addstr(1,0,"Translation:")
            
            for char in current_text:
                stdscr.addstr(char, curses.color_pair(3))

            stdscr.refresh()

        else:
            stdscr.addstr(1,0,"Translation:")
            
            for char in current_text:
                stdscr.addstr(char, curses.color_pair(4))

            stdscr.addstr(2,0,"Correct Translation: ")
            stdscr.addstr(vocabPair[1], curses.color_pair(3))

            stdscr.refresh()

        stdscr.getkey()

if __name__ == '__main__':
    wrapper(main)
